% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/node_predictions.R
\name{get_pred_estimates}
\alias{get_pred_estimates}
\title{Plug-in function for prediction estimates and confidence intervals}
\usage{
get_pred_estimates(values, add_interval = FALSE, interval_level = 0.95)
}
\arguments{
\item{values}{Values of the outcome in a tree node.}

\item{add_interval}{Whether to compute confidence intervals.}

\item{interval_level}{Confidence level. Must be strictly greater than 0 and less
than 1. Defaults to 0.95, which corresponds to a 95 percent confidence
interval.}
}
\value{
A  tibble with the estimates and the interval boundaries, with
differences based on the type of input:

\describe{ \item{Continuous values}{One row with the mean and optionally
the confidence intervals of the mean} \item{Discrete values}{One row for
each unique value, identified in the \code{y.level} column, with the value
probability and the binomial confidence interval around the probability.}}
}
\description{
This function provides maximum likelihood point estimates of the outcome for
each node in the tree (albeit it can be used with any vector of values). It
also computes the confidence intervals around those estimates, using the
normal approximation \eqn{mean Â± Z_{\alpha}\times SE} for continuous outcomes
and \code{stats::binom.test()} exact intervals for discrete (i.e. character,
factor, logical) ones. The function argument and output are conform to
\code{broom} package paradigm.
}
\details{
The function is thought to be passed as the \code{est_fun} argument of
\code{tidy_tree()}, but works also as stand-alone. This is a default estimation
method Estimates can be extremely noisy in decision trees, especially in
small terminal nodes; therefore more robust solutions (e.g. Bayesian
regularized intervals) are a better choice.
}
\examples{

## Stand alone usage
get_pred_estimates(iris$Species)
get_pred_estimates(iris$Sepal.Width)


mod <- rpart::rpart(iris$Species ~ iris$Sepal.Length, iris)

## Usage with `tidy_tree()`
## (actually esl_fun = get_pred_estimates is the default)
tidy_tree(mod, add_estimates = T, esl_fun = get_pred_estimates, add_interval = T)



}
